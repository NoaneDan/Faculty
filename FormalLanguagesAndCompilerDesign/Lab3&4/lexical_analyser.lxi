%option noyywrap
%{
    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>
    #include "parser.tab.h"

    #define LENGTH 100

    enum Token {
        T_START,
        T_END,
        T_DECLVAR,
        T_DECLCONST,
        T_DECLTYPE,
        T_INTEGER,
        T_REAL,
        T_ASSIG,
        T_PLUS,
        T_MINUS,
        T_TIMES,
        T_DIV,
        T_MOD,
        T_POW,
        T_EQ,
        T_NEQ,
        T_GTR,
        T_LSS,
        T_GEQ,
        T_LEQ,
        T_WHILESYM,
        T_IFSYM,
        T_DOSYM,
        T_WRITEOP,
        T_READOP,
        T_ID,
        T_INTEGERVAL,
        T_REALVAL,
        T_UNKNOWN
    };

    enum Type {
        CONSTANT,
        VARIABLE
    };

    struct PIF {
        int code;
        int* st_code;
    };

    struct ST {
        char id[8];
        int code;
    };

    struct List {
        void* list;
        int length;
    };

    int const_code = 0;
    int var_code = 0;
    int line_number = 1;
    
    struct List pif;
    struct List st;

    void init() {

        pif.list = malloc(sizeof(struct PIF) * LENGTH);
        pif.length = 0;

        st.list = malloc(sizeof(struct ST) * LENGTH);
        st.length = 0;
    }

    int search(char *value) {

        int position = -1, index;

        for (index = 0; index < st.length; ++index) {
            if (strcmp(((struct ST*) st.list)[index].id, value) == 0) {
                position = index;
                break;
            }
        }

        return position;
    }

    int add_keyword(int code, int* st_code) {

        struct PIF* keyword = malloc(sizeof(struct PIF));
        keyword->code = code;
        keyword->st_code = st_code;

        ((struct PIF*) pif.list)[pif.length++] = *keyword;
        
        return code;
    }

    int* add_symbol(char* value, enum Type type) {

        int* code;
        int position;

        position = search(value);
        if (position == -1) {
            struct ST* symbol = malloc(sizeof(struct ST));
            strcpy(symbol->id, value);
            if (type == CONSTANT) {
                symbol->code = --const_code;    
                *code = const_code;  
            }
            else {
                symbol->code = ++var_code;
                *code = var_code;
            }
    
            ((struct ST*) st.list)[st.length++] = *symbol;
        }
        else {
            *code = ((struct ST *) st.list)[position].code;
        }

        return code;
    }

    void print_PIF() {

        printf("%s", ">>> Program Internal Form\n");

        int index;
        struct PIF keyword;

        for (index = 0; index < pif.length; ++index) {
            keyword = ((struct PIF *) pif.list)[index];
            
            if (keyword.st_code != NULL) {
                printf("%d\t\t--\t\t%d\n", keyword.code, *(keyword.st_code));
            }
            else {
                printf("%d\t\t--\t\tNULL\n", keyword.code);
            }
        }
    }

    void print_ST() {

        printf("%s", ">>> Symbol Table\n");

        int index;
        struct ST symbol;

        for (index = 0; index < st.length; ++index) {
            symbol = ((struct ST *) st.list)[index];
            printf("%s\t\t--\t\t%d\n", symbol.id, symbol.code);
        }
    }
%}

digit       [0-9]
letter      [_$a-zA-Z]

%%
"("         { add_keyword(T_START, NULL);     return START;    }
")"         { add_keyword(T_END, NULL);       return END;      }
"newv"      { add_keyword(T_DECLVAR, NULL);   return DECLVAR;  }
"newc"      { add_keyword(T_DECLCONST, NULL); return DECLCONST;}
"struct"    { add_keyword(T_DECLTYPE, NULL);  return DECLTYPE; }
"integer"   { add_keyword(T_INTEGER, NULL);   return INTEGER;  }
"real"      { add_keyword(T_REAL, NULL);      return REAL;     }
"="         { add_keyword(T_ASSIG, NULL);     return ASSIG;    }
"+"         { add_keyword(T_PLUS, NULL);      return PLUS;     }
"-"         { add_keyword(T_MINUS, NULL);     return MINUS;    }
"*"         { add_keyword(T_TIMES, NULL);     return TIMES;    }
"/"         { add_keyword(T_DIV, NULL);       return DIV;      }
"%"         { add_keyword(T_MOD, NULL);       return MOD;      }
"**"        { add_keyword(T_POW, NULL);       return POW;      }
"=="        { add_keyword(T_EQ, NULL);        return EQ;       }
"<>"        { add_keyword(T_NEQ, NULL);       return NEQ;      }
">"         { add_keyword(T_GTR, NULL);       return GTR;      }
"<"         { add_keyword(T_LSS, NULL);       return LSS;      }
">="        { add_keyword(T_GEQ, NULL);       return GEQ;      }
"<="        { add_keyword(T_LEQ, NULL);       return LEQ;      }
"while"     { add_keyword(T_WHILESYM, NULL);  return WHILESYM; }
"if"        { add_keyword(T_IFSYM, NULL);     return IFSYM;    }
"do"        { add_keyword(T_DOSYM, NULL);     return DOSYM;    }
"write"     { add_keyword(T_WRITEOP, NULL);   return WRITEOP;  }
"read"      { add_keyword(T_READOP, NULL);    return READOP;   }
{letter}({letter}|{digit})*     {
                                    //yylval.id = strdup(yytext);
                                    add_keyword(T_ID, add_symbol(yytext, VARIABLE));
                                    return ID;
                                }
{digit}+                        {
                                    //yylval.integer_val = atoi(yytext);
                                    add_keyword(T_INTEGERVAL, add_symbol(yytext, CONSTANT));
                                    return INTEGERVAL;
                                }
{digit}+\.{digit}+              {
                                    //yylval.real_val = atof(yytext);
                                    add_keyword(T_REALVAL, add_symbol(yytext, CONSTANT));
                                    return REALVAL;
                                }
\n                              { ++line_number; }
[ \t\r]+                        { /* skip whitespace */ }
.                               { 
                                    printf("Unknown character [%c]\n",yytext[0]);
                                    return UNKNOWN;
                                }
%%